* add let prim
** bind immediately if a_form_val
** add bindings to readme
* add func prim
** add pair form / parser
** add a_frame struct
*** add vm.frames ls
** add return op
*** pop frame
* add inc/dec funcs to core lib
* add math lib with add/sub/ funcs
* add bench prim
* fib
* ---
* ---
* sort a_pool.free_slots in size order
** bail out in malloc if > size
** insert where >=

(func fibrec [n:Int] [Int]
  (if (< $n 2) $n (+ (fibrec (dec $n)) (fibrec (- $n 2)))))

public func stackReader(p: Parser) throws -> Form? {
    let fpos = p.pos
    var c = p.getc()
        
    if c != "[" {
        if c != nil { p.ungetc(c!) }
        return nil
    }
        
    p.nextColumn()
    var items: [Form] = []

    while true {
        try spaceReader(p)
        c = p.getc()
        if c == nil || c == "]" { break }
        p.ungetc(c!)
        if !(try p.readForm()) { break }
        items.append(p.popForm()!)
    }

    if c != "]" { throw ReadError(p.pos, "Open stack form: \((c == nil) ? "nil" : String(c!))") }
    p.nextColumn()
    
    return StackForm(env: p.env, pos: fpos, items: items)
}
