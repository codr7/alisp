* add or/and prims
* move free into deref
** scope/form
*** grep remove free calls 
* move val_deref into val_free
*** grep remove deref calls
* add io.open
** add enums
*** (enum OpenMode RD RW RD-OW APP RD-APP)
** add R/W/RWFile
* add tasks
** struct a_task
** bool done
** ls args
** func body
** add vm.tasks
** add yield prim
* add type-of/isa prims
** readme/types
* add quoting
** add a_form_dump
** add a_val *a_form_quote(form, vm)
*** form_val if available
*** default quote form
**** add form type
**** add A_QUOTE_FORM
*** sym if id
**** add a_sym_type
**** add lset vm.syms
***** check in a_sym()
** add '-parser
* add bool a_feval(vm, path)
** add stream vm.path
** add int a_push_path
** add a_pop_path(int)
** process ARGV & load files instead of repl
* add separate func stacks
** store in frame
** move args on call
** move rets on returnb
** add a_ls_splice(self, fst, lst)
* add func op
** replaces skip goto in body
** reset & push unnamed args in analyze
* capture stored registers in func
** scan code for STORE & push reg
* add iterators
* add recoverable errors
** add vm.errors
** add struct a_error like form
** add a_error(vm, type, pos, spec, args)
** replace a_fail-calls
* add line comments with ;
* add support for dynamic lists
** add LS_OP
* add once prim
** add A_ONCE_OP
*** emit like bench
** keep internal val in op
** set on first eval
* add unsafe/u call flag
** skip arg/ret checks
* add macros
** rewrite def as macro
* add binding pool
** add vm.free_bindings like val
** use in scope/lib
** extract a_binding()/a_binding_free()
* add scope pool
** vm.free_scopes like val
* handle register target inside call op
** replace LOAD in call form emit
